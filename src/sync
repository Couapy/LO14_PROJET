#!/bin/bash

# Retourne le chemin d'un module
#
# $1 nom du module
function get_lib {
    clone_path=$(dirname $0)
    echo $clone_path/lib/$1
}

# Initialise la synchronisation entre les dossier
#
# $1 chemin vers le nouveau dossier à cloner
function init {
    local=$PWD
    distant=$(readlink -f $1)
    if ! [ -d $distant ]; then
        if [ "$(echo "${distant}/" | egrep "^(${local}/)")" = "" ]; then
            if ! [ -d $local/.sync ]; then
                echo "[INFO] Initialisation en cours..."

                # Copie des fichiers
                cp -pr $local $distant
                # On créé un .sync dans les deux dossies
                #   Génère le journal dans les deux dossiers
                mkdir $local/.sync
                journal_path=$(get_lib journal)
                journal=$($journal_path get $local > $local/.sync/journal)

                cp -r $local/.sync $distant/.sync

                #   Génère le fichier remote dans les deux dossiers
                echo $distant > $local/.sync/remote
                echo $local > $distant/.sync/remote

                echo "[INFO] Initialisation terminé..."
            else
                echo "[ERR] Le dossier actuel est déjà synchronisé."
            fi
        else
            echo "[ERR] Le dossier distant se trouve dans le dossier à cloner."
        fi
    else
        echo "[ERR] Le dossier ${distant} existe déjà."
    fi
}

# Affiche les modification depuis la dernière synchronisation
function diff {
    journal_path=$(get_lib journal)
    resultat=$($journal_path diff $PWD)
    if [ "$resultat" != "" ]; then
        echo '[INFO] Les modifications suivantes ont été faites :'
        for ligne in $resultat
        do
            echo $ligne
        done
    else
        echo "[INFO] Aucune modification n'a été apportée." 
    fi
}

# Cette fonction permet de mettre à jour le
function sync {
    if [ -d $PWD/.sync ]; then
        local=$PWD
        distant=$(cat $local/.sync/remote)

        echo "[INFO] Synchronisation en cours..."

        # S'il n'y a pas de confltits dans les deux sens
        sync_path=$(get_lib sync)
        conflits=$($sync_path conflits $local)
        if [[ $($sync_path conflits $local) -eq 0 && $($sync_path conflits $distant) -eq 0 ]]; then

            # Effectuer les mise à jour à partir des fichiers diff
            # TODO

            echo "[INFO] Synchronisation terminée."
        else
            echo "[ERR] Des conflits n'ont pas été résolus."
        fi
    else
        echo "[ERR] Ce dossier n'est pas synchronisé."
    fi
}

# Fonction main du projet
#
# $1 commande à executer
# $... arguments de la commande
function main {
    if [ $command == "init" ]; then
        init $2
        exit
    fi

    if [ $command == "diff" ]; then
        diff
        exit
    fi

    if [ $command == "sync" ]; then
        sync
        exit
    fi
    # On affiche l'aide ici
    src=$(dirname $0)
    cat $src/help.md
}

if [ $# -eq 0 ]; then
    echo "Ce script attend un argument."
    command="help"
else
    command=$1
fi
main $@
